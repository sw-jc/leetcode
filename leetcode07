//solution 1  in java
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
            ListNode newNode=new ListNode(0);
            ListNode temp=newNode;
            while(!(l1==null||l2==null)){
                    if(l1.val>l2.val){
                            temp.next=l2;
                            l2=l2.next;
                    }else{
                            temp.next=l1;
                            l1=l1.next;
                    }
                    temp=temp.next;
            }
            if(l1==null){
                    temp.next=l2;
            }
            if(l2==null){
                    temp.next=l1;
            }
            return newNode.next;
        
    }
}

//solution 2 in cpp
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
            ListNode* newNode=new ListNode(0);
            ListNode* temp=newNode;
            while(l1&&l2){
                    if(l1->val>l2->val){
                            temp->next=l2;
                            l2=l2->next;
                    }else{
                            temp->next=l1;
                            l1=l1->next;
                    }
                    temp=temp->next;
            }
            if(l1){
                 temp->next=l1;   
            }
            if(l2){
                   temp->next=l2; 
            }
            return newNode->next;
    }
       
};

//solution 3
//a recursive solution ..but i can not apprensive it,this algorithm is awesome
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        
        if(l1->val < l2->val) {
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwoLists(l2->next, l1);
            return l2;
        }
    }
};
