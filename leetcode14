class MyLinkedList {
    ListNode head;
    ListNode tail;
    int length;//记录表长。。
    /** Initialize your data structure here. */
    public void  getelement(){
    	ListNode temp=head;
    	while(temp!=null){
    		System.out.println(temp.val);
    		temp=temp.next;
    	}
    }
    public MyLinkedList() {
        head=null;
        tail=null;
        length=0;
    }
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    public int get(int index) {
        if(index<0||index>length-1){
            return -1;
        }
        ListNode temp=head;
        while(index>0){
           temp=temp.next;
            index--;
        }
        return temp.val;
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    public void addAtHead(int val) {
        ListNode newNode=new ListNode(val);
        if(head==null){
            head=newNode;
            tail=newNode;
        }else{
            newNode.next=head;
            head=newNode;
        }
        length++;
    }
    
    /** Append a node of value val to the last element of the linked list. */
    public void addAtTail(int val) {
        ListNode temp=new ListNode(val);
        if(tail==null){
            head=temp;
            tail=temp;
        }else{
            tail.next=temp;
            tail=tail.next;
        }
        length++;
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
    public void addAtIndex(int index, int val) {
        ListNode temp=new ListNode(val);
        if(index<0||index>length){
            return;
        }
        if(index==length){
            if(length==0){
                head=tail=temp;
                length++;
                return;
            }else{
            tail.next=temp;
            tail=tail.next;
            length++;
            return;
            }
        }
        if(index==0){
            temp.next=head.next;
            head=temp;
            length++;
            return;
        }
        //一般情况先找前驱
        ListNode pre=head;
        while(index>1){
            pre=pre.next;
            index--;
        }
        temp.next=pre.next;
        pre.next=temp;
        length++;
        return;
    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    public void deleteAtIndex(int index) {
        if(index<0||index>length-1){
            return;
        }
        if(index==0){
            head=head.next;
            if(head==null){
                tail=null;
            }
            length--;
            return;
        }
        //找到要删除的前驱
        ListNode pre=head;
        while(index>1){
            pre=pre.next;
            index--;
        }
        pre.next=pre.next.next;
        length--;
        //如果删除的是最后一个节点
        if(pre.next==null){
            tail=pre;
        }
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
